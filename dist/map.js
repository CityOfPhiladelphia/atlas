(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{282:function(t,e,n){"use strict";e.a=function(t,e,n){const s=Object.keys(n).filter(t=>t.startsWith("l-")).map(t=>t.slice(2));for(let n of s){const s="l-"+n;e.on(n,e=>{t.$emit(s,e)})}}},316:function(t,e,n){var s=n(406);"string"==typeof s&&(s=[[t.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(12)(s,i);s.locals&&(t.exports=s.locals)},405:function(t,e,n){"use strict";var s=n(316);n.n(s).a},406:function(t,e,n){(t.exports=n(11)(!1)).push([t.i,"\n.map-container {\n  height: 100%;\n}\n.map-container-type2 {\n  height: calc(100vh - 109px);\n}\n.map {\n  height: 100%;\n}\n@media (max-width: 749px) {\n.map-container {\n    height: 300px;\n}\n}\n\n/* @media screen and (max-width: 40em) { */\n@media screen and (max-width: 750px) {\n.map-container-type2 {\n    height: calc(100vh - 141px);\n}\n}\n",""])},493:function(t,e,n){"use strict";n.r(e);var s=n(0),i=n(282),a={name:"Map_",props:["center","zoom","zoomControlPosition","minZoom","maxZoom"],mounted(){const t=this.$leafletElement=this.createLeafletElement();t.zoomControl.setPosition(this.$props.zoomControlPosition),this.$store.commit("setMap",{map:t}),this.setMapView(this.center),this.$nextTick(()=>{t.attributionControl.setPrefix('<a target="_blank" href="//www.phila.gov/it/aboutus/units/Pages/GISServicesGroup.aspx">City of Philadelphia | CityGeo</a>')});for(let t of this.$children)t.parentMounted(this,t.$props);Object(i.a)(this,this.$leafletElement,this._events),this.$config.map.clickToIdentifyFeatures&&t.on("click",this.identifyFeatures)},watch:{center(t){this.setMapView(t)},zoom(t){t&&(this.$leafletElement.setZoom(t),this.$store.commit("setMapZoom",t))},mapBounds(t){console.log("watch nextBounds is firing, nextBounds:",t,"this.$leafletElement:",this.$leafletElement),this.setMapBounds(t)},fullScreenMapEnabled(){this.$leafletElement.invalidateSize()},webMapDisplayedLayers(t){let e=[];for(let t of this.intersectingFeatures)e.push(t.feature.layerName);console.log("map.vue watch nextWebMapDisplayedLayers:",t,"intersectingLayers:",e);for(let n of e)if(!t.includes(n))return void this.$store.commit("setIntersectingFeatures",[])}},computed:{mapContainerClass(){return this.$config.map.containerClass?this.$config.map.containerClass:"map-container"},fullScreenMapEnabled(){return this.$store.state.fullScreenMapEnabled},mapBounds(){return this.$store.state.map.bounds},webMapDisplayedLayers(){return this.$store.state.map.webMapDisplayedLayers},intersectingFeatures(){return this.$store.state.map.intersectingFeatures}},methods:{createLeafletElement(){const{zoomControlPosition:t,...e}=this.$props;return new s.Map(this.$refs.map,e)},childDidMount(t){t.addTo(this.$leafletElement)},setMapView(t=[],e=this.zoom){if(0===t.length)return;const[n,i]=t,a=new s.LatLng(i,n);this.$leafletElement.setView(a,e)},setMapBounds(t){if(t._northEast){this.$leafletElement.fitBounds([[t._northEast.lat,t._northEast.lng],[t._southWest.lat,t._southWest.lng]])}},identifyFeatures(t){const e=this.$leafletElement,n=new s.LatLngBounds(t.latlng,t.latlng);let i,a=[];for(let r in e._layers){var o=e._layers[r];if(o._layers)for(let e in o._layers){const l=o._layers[e];if(l.feature){let e;"Polygon"===(i=l.feature.geometry.type)||"MultiPolygon"===i?l.contains(t.latlng)&&this.checkForDuplicates(r,l,a):"LineString"===i?(e=l.getBounds())&&n.intersects(e)&&this.checkForDuplicates(r,l,a):"Point"===i&&(e=new s.LatLngBounds(l._latlng,l._latlng))&&n.intersects(e)&&this.checkForDuplicates(r,l,a)}}}this.$store.commit("setPopupCoords",t.latlng),this.$store.commit("setIntersectingFeatures",a)},checkForDuplicates(t,e,n){let s=[];for(let e=0;e<n.length;e++)s[e]=t+"_"+n[e].feature.id;s.includes(t+"_"+e.feature.id)||n.push(e)}}},o=(n(405),n(47)),r=Object(o.a)(a,function(){var t=this.$createElement,e=this._self._c||t;return e("div",{class:this.mapContainerClass},[e("div",{ref:"map",staticClass:"map",attrs:{id:"map"}}),this._v(" "),e("div",[this._t("default")],2)])},[],!1,null,null,null);e.default=r.exports}}]);